#!/bin/bash -l

# (1) Calculate overall completeness as a function of flux density
# (2) Generate completeness map at each flux density

#SBATCH --account=pawsey0272
#SBATCH --partition=workq
#SBATCH --clusters=magnus
#SBATCH --nodes=1
#SBATCH --output=/astro/mwasci/tfranzen/make_cmp_map.o%A
#SBATCH --error=/astro/mwasci/tfranzen/make_cmp_map.e%A
#SBATCH --export=NONE

module load singularity
echo $SINGULARITY_BINDPATH
export containerImage=/astro/mwasci/tgalvin/gleamx_testing_small.img

start_time=`date +%s`

# Read input parameters
if [[ $1 ]] && [[ $2 ]] && [[ $3 ]] && [[ $4 ]] && [[ $5 ]] && [[ $6 ]] && [[ $7 ]]; then
# File containing the positions of the injected sources (generated by 'generate_pos.sh')
  injected_sources=`echo $1 | awk -F"=" '{print $NF}'`
# Directory containing the catalogues of detected simulated sources (output of 'inject_sources.sh')
  detected_sources=`echo $2 | awk -F"=" '{print $NF}'`
# Fluxes at which to calculate completeness. Enter flux_min, flux_max, flux_interval, in mJy (e.g. 5,10,1).
  flux=`echo $3 | awk -F"=" '{print $NF}'`
# Template FITS map for generating completeness maps.
  template_map=`echo $4 | awk -F"=" '{print $NF}'`
# Sky coverage of completeness maps. This should normally correspond to the area of sky in which the
# simulated sources were injected. Enter ra_min, ra_max, dec_min, dec_max, in deg.
# For example, for 60 < RA < 300 enter: 60,300,-90,90
# For RA < 60 or RA > 300, and -40 < Dec < -10 enter: 300,60,-40,-10
  region=`echo $5 | awk -F"=" '{print $NF}'`
# Radius of circle centred on each pixel in which to calculate the completeness, in deg
  rad=`echo $6 | awk -F"=" '{print $NF}'`
# Output directory
  output_dir=`echo $7 | awk -F"=" '{print $NF}'`
else
  echo "Give me: injected_sources detected_sources flux template_map region rad output_dir"
  exit 1
fi

# Create output directory
if [ -e $output_dir ]; then
  echo "Error: Output directory $output_dir already exists. Aborting."
  exit 1
else
  mkdir $output_dir
  cd $output_dir
fi

# Write input parameters to file for record
cat >> input_parameters_make_cmp_map.txt <<EOPAR
injected_sources = $injected_sources
detected_sources = $detected_sources
flux = $flux
template_map = $template_map
region = $region
rad = $rad
output_dir = $output_dir
EOPAR

# Run Python script
singularity exec $containerImage $MYCODE/make_cmp_map.py --flux=$flux --region=$region --rad=$rad --template_map=$template_map $injected_sources $detected_sources

end_time=`date +%s`
duration=`echo "$end_time-$start_time" | bc -l`
echo "Total runtime = $duration sec"

# Move output and error files to output directory
root=/astro/mwasci/$USER/make_cmp_map
mv $root.o${SLURM_JOB_ID} $root.e${SLURM_JOB_ID} .

exit 0



